# Ultralytics YOLO üöÄ, AGPL-3.0 license

from ultralytics.utils import SETTINGS

try:
    assert SETTINGS["raytune"] is True  # verify integration is enabled
    import ray
    from ray import tune
    from ray.air import session

except (ImportError, AssertionError):
    tune = None


def on_fit_epoch_end(trainer):
    """Sends training metrics to Ray Tune at end of each epoch."""
    # if ray.train._internal.session.get_session():  # replacement for deprecated ray.tune.is_session_enabled()
    #     metrics = trainer.metrics
    #     metrics["epoch"] = trainer.epoch
    #     session.report(metrics)
    try:
        # Th·ª≠ ph∆∞∆°ng th·ª©c m·ªõi ƒë∆∞·ª£c g·ª£i √Ω
        has_session = ray.train.get_session()
    except (AttributeError, ImportError):
        try:
            # Th·ª≠ ph∆∞∆°ng th·ª©c c≈© (ph√≤ng h·ªù)
            # has_session = ray.tune.is_session_enabled() 
            has_session = ray.train._internal.session._get_session() 
        except (AttributeError, ImportError):
            has_session = False
    
    if has_session:
        metrics = trainer.metrics
        metrics["epoch"] = trainer.epoch
        session.report(metrics)


callbacks = (
    {
        "on_fit_epoch_end": on_fit_epoch_end,
    }
    if tune
    else {}
)



# # Ultralytics YOLO üöÄ, AGPL-3.0 license

# from ultralytics.utils import SETTINGS, LOGGER

# # --- C·∫£i thi·ªán try-except ƒë·ªÉ x·ª≠ l√Ω l·ªói import t·ªët h∆°n ---
# try:
#     # Ch·ªâ ki·ªÉm tra setting n·∫øu mu·ªën b·∫≠t t√≠ch h·ª£p raytune
#     if SETTINGS.get("raytune", False): # L·∫•y gi√° tr·ªã setting an to√†n h∆°n
#         import ray
#         from ray.air import session # Ch·ªâ c·∫ßn session ƒë·ªÉ report
#         from ray import tune # C√≥ th·ªÉ c·∫ßn tune cho is_session_enabled fallback
#         # X√°c minh r·∫±ng ray, session, tune ƒë√£ ƒë∆∞·ª£c import th√†nh c√¥ng
#         assert ray is not None
#         assert session is not None
#         # assert tune is not None # Kh√¥ng nh·∫•t thi·∫øt c·∫ßn tune n·∫øu get_session ho·∫°t ƒë·ªông
#         LOGGER.info("RayTune integration enabled.")
#         RAYTUNE_AVAILABLE = True
#     else:
#         # N·∫øu setting l√† False, kh√¥ng c·∫ßn import ray
#         RAYTUNE_AVAILABLE = False
#         ray = None
#         session = None
#         tune = None

# except (ImportError, AssertionError, ModuleNotFoundError):
#     # N·∫øu c√≥ l·ªói import ho·∫∑c setting b·ªã thi·∫øu/sai, t·∫Øt t√≠ch h·ª£p
#     RAYTUNE_AVAILABLE = False
#     ray = None
#     session = None
#     tune = None
#     # Kh√¥ng c·∫ßn log l·ªói ·ªü ƒë√¢y, ch·ªâ c·∫ßn ƒë·∫£m b·∫£o kh√¥ng b·ªã crash


# def on_fit_epoch_end(trainer):
#     """Sends training metrics to Ray Tune at end of each epoch if session is active."""

#     # N·∫øu RayTune kh√¥ng kh·∫£ d·ª•ng (do l·ªói import ho·∫∑c setting), kh√¥ng l√†m g√¨ c·∫£
#     if not RAYTUNE_AVAILABLE:
#         return

#     has_session = False # M·∫∑c ƒë·ªãnh l√† kh√¥ng c√≥ session
#     current_session = None
#     try:
#         # --- S·ª¨A L·ªñI: S·ª≠ d·ª•ng API c√¥ng khai ray.train.get_session() ---
#         current_session = ray.train.get_session()
#         has_session = current_session is not None
#         # --- K·∫æT TH√öC S·ª¨A L·ªñI ---

#     # Ngo·∫°i l·ªá n√†y n√™n b·∫Øt c√°c l·ªói n·∫øu ray kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch
#     # ho·∫∑c API thay ƒë·ªïi ho√†n to√†n
#     except (AttributeError, ImportError, NameError) as e:
#          # C√≥ th·ªÉ th√™m log ·ªü ƒë√¢y n·∫øu mu·ªën debug k·ªπ h∆°n
#          # LOGGER.warning(f"Could not check Ray session using ray.train.get_session(): {e}")
#          # Th·ª≠ fallback v·ªõi ray.tune n·∫øu c√≥
#          if tune is not None:
#              try:
#                  has_session = ray.tune.is_session_enabled()
#              except (AttributeError, ImportError, NameError):
#                  has_session = False # C·∫£ hai c√°ch ƒë·ªÅu th·∫•t b·∫°i
#          else:
#             has_session = False # tune kh√¥ng ƒë∆∞·ª£c import, kh√¥ng th·ªÉ fallback


#     # N·∫øu c√≥ session ƒëang ho·∫°t ƒë·ªông, g·ª≠i metrics
#     if has_session and current_session is not None: # ƒê·∫£m b·∫£o current_session t·ªìn t·∫°i
#         try:
#             metrics = trainer.metrics if hasattr(trainer, 'metrics') else {}
#             # ƒê·∫£m b·∫£o metrics kh√¥ng r·ªóng v√† epoch t·ªìn t·∫°i
#             if hasattr(trainer, 'epoch') and metrics:
#                 metrics["epoch"] = trainer.epoch
#                 session.report(metrics) # S·ª≠ d·ª•ng session ƒë√£ import t·ª´ ray.air
#             # else: # Log n·∫øu kh√¥ng c√≥ metrics ho·∫∑c epoch
#             #     LOGGER.warning("RayTune callback: No metrics or epoch found in trainer to report.")
#         except Exception as e:
#             # B·∫Øt l·ªói chung khi g·ª≠i report ph√≤ng tr∆∞·ªùng h·ª£p API session.report thay ƒë·ªïi
#             LOGGER.warning(f"RayTune callback: Failed to report metrics: {e}")


# # Callback dictionary, ch·ªâ th√™m callback n·∫øu RayTune kh·∫£ d·ª•ng
# callbacks = (
#     {
#         "on_fit_epoch_end": on_fit_epoch_end,
#     }
#     if RAYTUNE_AVAILABLE # Ch·ªâ th√™m n·∫øu import v√† check setting th√†nh c√¥ng
#     else {}
# )